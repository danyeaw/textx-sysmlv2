/*****************************************************************************
 * SysML 2 Pilot Implementation
 * Copyright (c) 2018-2023 Model Driven Solutions, Inc.
 * Copyright (c) 2018 IncQuery Labs Ltd.
 * Copyright (c) 2019 Maplesoft (Waterloo Maple, Inc.)
 * Copyright (c) 2019 Mgnite Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * @license LGPL-3.0-or-later <http://spdx.org/licenses/LGPL-3.0-or-later>
 *
 * Contributors:
 *  Ed Seidewitz, MDS
 *  Zoltan Kiss, IncQuery
 *  Balazs Grill, IncQuery
 *  Hisashi Miyashita, Maplesoft/Mgnite
 *
 *****************************************************************************/

/* ROOT NAMESPACE */

RootNamespace :
    'temp'
//	{SysML::Namespace}NamespaceBodyElement*
;

/* ELEMENTS */

/* Elements */

Identification :
    'temp'
//	  '<' declaredShortName = Name '>' ( declaredName = Name )?
//	| declaredName = Name
;

/* Relationships */

RelationshipBody :
    ';' | '{' RelationshipOwnedElement* '}'
;

RelationshipOwnedElement :
    'temp'
//      ownedRelatedElement += OwnedRelatedElement
//    | ownedRelationship += OwnedAnnotation
;

OwnedRelatedElement :
    NonFeatureElement | FeatureElement
;

/* DEPENDENCIES */

Dependency :
//	( ownedRelationship += PrefixMetadataAnnotation )*
	'dependency' ( Identification? 'from' )?
//  client += [SysML::Element|QualifiedName] ( ',' client += [SysML::Element|QualifiedName] )* 'to'
//  supplier += [SysML::Element|QualifiedName] ( ',' supplier += [SysML::Element|QualifiedName] )*
    RelationshipBody
;

/* ANNOTATIONS */

Annotation :
    'temp'
//	annotatedElement = [SysML::Element|QualifiedName]
;

OwnedAnnotation :
    'temp'
//	ownedRelatedElement += AnnotatingElement
;

AnnotatingElement :
	  Comment
	| Documentation
	| TextualRepresentation
	| MetadataFeature
;

/* Comments */

Comment :
	( 'comment' Identification?
//	  ('about' ownedRelationship += Annotation
//	     ( ',' ownedRelationship += Annotation )* )?
	)?
//	body = REGULAR_COMMENT
;

Documentation :
    'temp'
//	'doc' Identification? body = REGULAR_COMMENT
;

/* Textual Representation */

TextualRepresentation :
    ( 'rep' Identification? )?
//  'language' language = STRING_VALUE
//  body = REGULAR_COMMENT
;

/* NAMESPACES */

Namespace :
//	( ownedRelationship += PrefixMetadataMember )*
	NamespaceDeclaration NamespaceBody
;

NamespaceDeclaration :
	'namespace' Identification?
;

NamespaceBody :
	  ';'
//	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
//		    ownedRelationship += NamespaceMember
//	      | ownedRelationship += AliasMember
//	      | ownedRelationship += Import )*
	  '}'
;

/* Namespace Bodies */

NamespaceBodyElement :
    'temp'
//	  ownedRelationship += NamespaceMember
//	| ownedRelationship += AliasMember
//	| ownedRelationship += Import
;

MemberPrefix :
    ( visibility = VisibilityIndicator )?
;

NamespaceMember :
	  NonFeatureMember | NamespaceFeatureMember
;

NonFeatureMember :
    'temp'
//	MemberPrefix ownedRelatedElement += MemberElement
;

NamespaceFeatureMember :
    'temp'
//	MemberPrefix ownedRelatedElement += FeatureElement
;

AliasMember :
	MemberPrefix
//	'alias' ( '<' memberShortName = Name '>' )? ( memberName = Name )?
//	'for' memberElement = [SysML::Element|QualifiedName]
	RelationshipBody
;

ImportPrefix :
	( visibility = VisibilityIndicator )?
	'import' ( isImportAll ?= 'all' )?
;

Import :
	( MembershipImport | NamespaceImport )
	RelationshipBody
;

MembershipImport :
	ImportPrefix ImportedMembership
;

ImportedMembership :
//	importedMembership = [SysML::Membership|QualifiedName]
	( '::' isRecursive ?= '**' )?
;

NamespaceImport :
	ImportPrefix
	( ImportedNamespace
//	| ownedRelatedElement += FilterPackage
	)
;

ImportedNamespace :
//	importedNamespace = [SysML::Namespace|QualifiedName] '::' '*'
	( '::' isRecursive ?= '**' )?
;

FilterPackage :
    'temp'
//	ownedRelationship += FilterPackageImport
//	( ownedRelationship += FilterPackageMember )+
;

FilterPackageImport :
	 FilterPackageMembershipImport | FilterPackageNamespaceImport
;

FilterPackageMembershipImport :
	ImportedMembership
;

FilterPackageNamespaceImport :
	ImportedNamespace
;

FilterPackageMember :
    'temp'
//	visibility = FilterPackageMemberVisibility ownedRelatedElement += OwnedExpression ']'
;

FilterPackageMemberVisibility :
	'['
;

VisibilityIndicator :
	'public' | 'private' | 'protected'
;

/* Namespace Elements */

MemberElement :
	AnnotatingElement | NonFeatureElement
;

NonFeatureElement :
	  Dependency
	| Namespace
	| Package
	| LibraryPackage
	| Multiplicity
	| Type
	| Classifier
	| Class
	| Structure
	| Metaclass
	| DataType
	| Association
	| AssociationStructure
	| Interaction
	| Behavior
	| Function
	| Predicate
	| Specialization
	| Conjugation
	| FeatureTyping
	| Subclassification
	| Disjoining
	| FeatureInverting
	| Subsetting
	| Redefinition
	| TypeFeaturing
;

FeatureElement :
	  Feature
	| Step
	| Expression
	| BooleanExpression
	| Invariant
	| Connector
	| BindingConnector
	| Succession
	| ItemFlow
	| SuccessionItemFlow
;

/* PACKAGES */

Package :
//	( ownedRelationship += PrefixMetadataMember )*
	PackageDeclaration PackageBody
;

LibraryPackage :
	( isStandard ?= 'standard' )? 'library'
//	( ownedRelationship += PrefixMetadataMember )*
	PackageDeclaration PackageBody
;

PackageDeclaration :
	'package' Identification?
;

PackageBody :
	  ';'
//	| '{' ( // Note: PackageBodyElement is expanded here to avoid
			// infinite loops in the incremental parser.
//		    ownedRelationship += NamespaceMember
//	      | ownedRelationship += ElementFilterMember
//	      | ownedRelationship += AliasMember
//	      | ownedRelationship += Import )*
	  '}'
;

ElementFilterMember :
	MemberPrefix
//	'filter' ownedRelatedElement += OwnedExpression ';'
;

/* TYPES */

/* Types */

TypePrefix :
	( isAbstract ?= 'abstract' )?
//	( ownedRelationship += PrefixMetadataMember )*
;

Type :
    TypePrefix 'type'
    TypeDeclaration TypeBody
;

TypeDeclaration :
    ( isSufficient ?= 'all' )? Identification?
//    ( ownedRelationship += OwnedMultiplicity )?
    ( SpecializationPart | ConjugationPart )+
    TypeRelationshipPart*
;

SpecializationPart :
    'temp'
//      ( ':>' | 'specializes' ) ownedRelationship += OwnedSpecialization
//      ( ',' ownedRelationship += OwnedSpecialization )*
;

ConjugationPart :
    'temp'
//	( '~' | 'conjugates' ) ownedRelationship += OwnedConjugation
;

TypeRelationshipPart :
	DisjoiningPart | UnioningPart | IntersectingPart | DifferencingPart
;

DisjoiningPart :
    'temp'
//	'disjoint' 'from' ownedRelationship += OwnedDisjoining
//	( ',' ownedRelationship += OwnedDisjoining )*
;

UnioningPart :
    'temp'
//	'unions' ownedRelationship += Unioning
//	( ',' ownedRelationship += Unioning )*
;

IntersectingPart :
    'temp'
//	'intersects' ownedRelationship += Intersecting
//	( ',' ownedRelationship += Intersecting )*
;

DifferencingPart :
    'temp'
//	'differences' ownedRelationship += Differencing
//	( ',' ownedRelationship += Differencing )*
;

TypeBody :
	 ';'
//	| '{' ( ownedRelationship += NonFeatureMember
//		  | ownedRelationship += FeatureMember
//		  | ownedRelationship += AliasMember
//		  | ownedRelationship += Import
//	      )*
	  '}'
;

/* Feature Membership */

FeatureMember :
	TypeFeatureMember | OwnedFeatureMember
;

TypeFeatureMember :
    'temp'
//	MemberPrefix 'member' ownedRelatedElement += FeatureElement
;

OwnedFeatureMember :
    'temp'
//	MemberPrefix ownedRelatedElement += FeatureElement
;

/* Specialization */

Specialization :
    ( 'specialization' Identification? )?
    'subtype'
//	( specific = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>' | 'specializes')
//	( general = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedSpecialization :
    'temp'
//	  general = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Conjugation */

Conjugation :
	( 'conjugation' Identification? )?
    'conjugate'
//    ( conjugatedType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
    ( '~' | 'conjugates')
//    ( originalType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedConjugation :
    'temp'
//	  originalType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Disjoining */

Disjoining :
	( 'disjoining' Identification? )?
	'disjoint'
//	( typeDisjoined = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	'from'
//	( disjoiningType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedDisjoining :
    'temp'
//	  disjoiningType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Unioning, Intersecting and Differencing */

Unioning :
    'temp'
//	  unioningType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

Intersecting :
    'temp'
//	  intersectingType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

Differencing :
    'temp'
//	  differencingType = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* CLASSIFIERS */

/* Classifiers */

Classifier :
	TypePrefix 'classifier'
	ClassifierDeclaration TypeBody
;

ClassifierDeclaration :
    (isSufficient ?= 'all' )? Identification?
//	( ownedRelationship += OwnedMultiplicity )?
	( SuperclassingPart | ClassifierConjugationPart )?
	TypeRelationshipPart*
;

SuperclassingPart :
    'temp'
//	( ':>' | 'specializes' ) ownedRelationship += Ownedsubclassification
//	( ',' ownedRelationship += Ownedsubclassification )*
;

ClassifierConjugationPart :
    'temp'
//	( '~' | 'conjugates' ) ownedRelationship += ClassifierConjugation
;

/* Subclassification */

Subclassification :
	( 'specialization' Identification? )?
//    'subclassifier' subclassifier = [SysML::Classifier | QualifiedName]
//    ( ':>' | 'specializes') superclassifier = [SysML::Classifier | QualifiedName]
    RelationshipBody
;

Ownedsubclassification :
    'temp'
//	superclassifier = [SysML::Classifier | QualifiedName]
;

/* Classifier Conjugation */

ClassifierConjugation :
    'temp'
//	originalType = [SysML::Classifier | QualifiedName]
;

/* FEATURES */

/* Features */

FeatureDirection :
	'in' | 'out' | 'inout'
;

FeaturePrefix :
	( direction = FeatureDirection )?
	( isAbstract ?= 'abstract' )?
	( isComposite ?= 'composite' | isPortion ?= 'portion' )?
	( isReadOnly ?= 'readonly' )?
	( isDerived ?= 'derived' )?
	( isEnd ?= 'end' )?
//	( ownedRelationship += PrefixMetadataMember )*
;

Feature :
	FeaturePrefix
	( 'feature'? FeatureDeclaration
//	| ownedRelationship += PrefixMetadataMember
	| 'feature'
	)
	ValuePart? TypeBody
;

FeatureDeclaration :
	( isSufficient ?= 'all' )?
	( Identification ( FeatureSpecializationPart | FeatureConjugationPart )?
	| FeatureSpecializationPart
	| FeatureConjugationPart
	)
	FeatureRelationshipPart*
;

FeatureRelationshipPart :
	TypeRelationshipPart | ChainingPart | InvertingPart | TypeFeaturingPart
;

ChainingPart :
    'temp'
//	'chains' ( ownedRelationship += OwnedFeatureChaining | FeatureChain )
;

InvertingPart :
    'temp'
//	'inverse' 'of' ownedRelationship += OwnedFeatureInverting
;

TypeFeaturingPart :
    'temp'
//	'featured' 'by' ownedRelationship += OwnedTypeFeaturing
//	( ',' ownedRelationship += OwnedTypeFeaturing )*
;

FeatureSpecializationPart :
    'temp'
//	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
//	| MultiplicityPart FeatureSpecialization*
;

MultiplicityPart :
    'temp'
//	  ownedRelationship += OwnedMultiplicity
//	| ( ownedRelationship += OwnedMultiplicity )?
//	  ( isOrdered ?= 'ordered' isNonunique ?= 'nonunique'?
//	  | isNonunique ?= 'nonunique' isOrdered ?= 'ordered'?
//	  )
;

FeatureSpecialization :
	Typings | Subsettings | References | Redefinitions
;

Typings :
    'temp'
//	TypedBy ( ',' ownedRelationship += OwnedFeatureTyping )*
;

TypedBy :
    'temp'
//	( ':' | 'typed' 'by' ) ownedRelationship += OwnedFeatureTyping
;

Subsettings :
    'temp'
//	Subsets ( ',' ownedRelationship += OwnedSubsetting )*
;

Subsets :
    'temp'
//	( ':>' | 'subsets' ) ownedRelationship += OwnedSubsetting
;

References :
    'temp'
//	ReferencesKeyword ownedRelationship += OwnedReferenceSubsetting
;

ReferencesKeyword :
	'::>' | 'references'
;

Redefinitions :
    'temp'
//	Redefines ( ',' ownedRelationship += OwnedRedefinition )*
;

Redefines :
    'temp'
//	( ':>>' | 'redefines' ) ownedRelationship += OwnedRedefinition
;

/* Feature Inverting */

FeatureInverting :
	( 'inverting' Identification? )?
	'inverse'
//	( featureInverted = [SysML::Feature| QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	'of'
//	( invertingFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedFeatureInverting :
    'temp'
//	  invertingFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Type Featuring */

TypeFeaturing :
	'featuring' ( Identification? 'of')?
//	featureOfType = [SysML::Feature | QualifiedName]
//	'by' featuringType = [SysML::Feature | QualifiedName]
	RelationshipBody
;

OwnedTypeFeaturing :
    'temp'
//	featuringType = [SysML::Type | QualifiedName]
;

/* Feature Typing */

FeatureTyping :
	( 'specialization' Identification? )?
//    'typing' typedFeature = [SysML::Feature | QualifiedName]
    (':' | 'typed' 'by') FeatureType
    RelationshipBody
;

OwnedFeatureTyping :
	FeatureType
;

FeatureType :
    'temp'
//	  type = [SysML::Type | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Subsetting */

Subsetting :
	( 'specialization' Identification? )?
    'subset'
//    ( subsettingFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>' | 'subsets' )
//    ( subsettedFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedSubsetting :
    'temp'
//	  subsettedFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

OwnedReferenceSubsetting :
    'temp'
//	  referencedFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Redefinition */

Redefinition :
	( 'specialization' Identification? )?
    'redefinition'
//    ( redefiningFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
    ( ':>>' | 'redefines' )
//    ( redefinedFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain )
	RelationshipBody
;

OwnedRedefinition :
    'temp'
//	  redefinedFeature = [SysML::Feature | QualifiedName]
//	| ownedRelatedElement += OwnedFeatureChain
;

/* Feature Conjugation */

FeatureConjugationPart :
    'temp'
//	( '~' | 'conjugates' ) ownedRelationship += FeatureConjugation
;

FeatureConjugation :
    'temp'
//	originalType = [SysML::Feature | QualifiedName ]
;

/* FEATURE VALUES */

ValuePart :
    'temp'
//	  ownedRelationship += FeatureValue
//	| ownedRelationship += FeatureValueExpression
//	  ownedRelationship += EmptyFeatureWriteMember
;

FeatureValue :
	( '=' | isDefault ?= 'default' ( '=' | isInitial ?= ':=' )? )
//	ownedRelatedElement += OwnedExpression
;

FeatureValueExpression :
	isInitial ?= ':='
//	ownedRelatedElement += OwnedExpression
;

EmptyFeatureWriteMember :
    'temp'
//	ownedRelatedElement += EmptyFeatureWrite
;

EmptyFeatureWrite :
    'temp'
//	ownedRelationship += EmptyTargetMember
//	ownedRelationship += EmptyParameterMember
;

EmptyTargetMember :
    'temp'
//	ownedRelatedElement += EmptyTargetParameter
;

EmptyTargetParameter :
    'temp'
//	ownedRelationship += TargetFeatureMember
;

TargetFeatureMember :
    'temp'
//	ownedRelatedElement += TargetFeature
;

TargetFeature :
    'temp'
//	ownedRelationship += EmptyFeatureMember
;

EmptyFeatureMember :
    'temp'
//	ownedRelatedElement += EmptyFeature
;

EmptyParameterMember :
    'temp'
//	ownedRelatedElement += EmptyFeature
;

/* MULTIPLICITIES */

Multiplicity :
	MultiplicitySubset | MultiplicityRange
;

MultiplicitySubset :
	'multiplicity' Identification? Subsets TypeBody
;

MultiplicityRange :
	'multiplicity' Identification? MultiplicityBounds TypeBody
;

OwnedMultiplicity :
    'temp'
//	ownedRelatedElement += OwnedMultiplicityRange
;

OwnedMultiplicityRange :
	MultiplicityBounds
;

MultiplicityBounds :
    'temp'
//	'[' ownedRelationship += MultiplicityExpressionMember
//	      ( '..' ownedRelationship += MultiplicityExpressionMember )? ']'
;

MultiplicityExpressionMember :
    'temp'
//	ownedRelatedElement += ( LiteralExpression | FeatureReferenceExpression )
;

/* CLASSIFICATION */

/* Data Types */

DataType :
	TypePrefix 'datatype'
	ClassifierDeclaration TypeBody
;

/* Classes */

Class :
	TypePrefix 'class'
	ClassifierDeclaration TypeBody
;

/* STRUCTURES */

Structure :
	TypePrefix 'struct'
	ClassifierDeclaration TypeBody
;


/* ASSOCIATIONS */

Association :
	TypePrefix 'assoc'
	ClassifierDeclaration TypeBody
;

AssociationStructure :
	TypePrefix 'assoc' 'struct'
	ClassifierDeclaration TypeBody
;

/* CONNECTORS */

/* Connectors */

Connector :
	FeaturePrefix 'connector'
	ConnectorDeclaration TypeBody
;

ConnectorDeclaration :
	BinaryConnectorDeclaration | NaryConnectorDeclaration
;

BinaryConnectorDeclaration :
	( FeatureDeclaration? 'from' | isSufficient ?= 'all' 'from'? )?
//	ownedRelationship += ConnectorEndMember 'to'
//	ownedRelationship += ConnectorEndMember
;

NaryConnectorDeclaration :
	FeatureDeclaration?
//	( '(' ownedRelationship += ConnectorEndMember ','
//	      ownedRelationship += ConnectorEndMember
//	      ( ',' ownedRelationship += ConnectorEndMember )*
//	  ')' )?
;

ConnectorEndMember :
    'temp'
//	ownedRelatedElement += ConnectorEnd
;

ConnectorEnd :
    'temp'
//	( declaredName = Name ReferencesKeyword )?
//	ownedRelationship += OwnedReferenceSubsetting
//	( ownedRelationship += OwnedMultiplicity )?
;

/* Binding Connectors */

BindingConnector :
	FeaturePrefix 'binding'
	BindingConnectorDeclaration TypeBody
;

BindingConnectorDeclaration :
	  FeatureDeclaration
//	  ( 'of' ownedRelationship += ConnectorEndMember
//	    '=' ownedRelationship += ConnectorEndMember )?
	| ( isSufficient ?= 'all' )?
//	  ( 'of'? ownedRelationship += ConnectorEndMember
//	    '=' ownedRelationship += ConnectorEndMember )?
;

/* Successions */

Succession :
	FeaturePrefix 'succession'
	SuccessionDeclaration TypeBody
;

SuccessionDeclaration :
	  FeatureDeclaration
//	  ( 'first' ownedRelationship += ConnectorEndMember
//	    'then' ownedRelationship += ConnectorEndMember )?
    | ( isSufficient ?= 'all' )?
//	  ( 'first'? ownedRelationship += ConnectorEndMember
//	    'then' ownedRelationship += ConnectorEndMember )?
;

/* BEHAVIORS */

/* Behaviors */

Behavior :
	TypePrefix 'behavior'
	ClassifierDeclaration TypeBody
;

/* Steps */

Step :
	FeaturePrefix 'step'
	StepDeclaration TypeBody
;

StepDeclaration :
	FeatureDeclaration? ValuePart?
;

/* FUNCTIONS */

/* Functions */

Function :
	TypePrefix 'function'
	ClassifierDeclaration FunctionBody
;

FunctionBody :
	';' | '{' FunctionBodyPart '}'
;

FunctionBodyPart :
    'temp'
//	( ownedRelationship += NonFeatureMember
//	| ownedRelationship += FeatureMember
//	| ownedRelationship += AliasMember
//	| ownedRelationship += Import
//	| ownedRelationship += ReturnFeatureMember
//	)*
//	( ownedRelationship += ResultExpressionMember )?
;

ReturnFeatureMember :
	MemberPrefix 'return'
//	ownedRelatedElement += FeatureElement
;

ResultExpressionMember :
    'temp'
//	MemberPrefix ownedRelatedElement += OwnedExpression
;

/* Expressions */

Expression :
	FeaturePrefix 'expr'
	ExpressionDeclaration FunctionBody
;

ExpressionDeclaration :
	FeatureDeclaration? ValuePart?
;

/* Predicates */


Predicate :
	TypePrefix 'predicate'
	ClassifierDeclaration FunctionBody
;

/* Boolean Expressions */

BooleanExpression :
	FeaturePrefix 'bool'
	ExpressionDeclaration FunctionBody
;

/* Invariants */

Invariant :
	FeaturePrefix 'inv' ( 'true' | isNegated ?= 'false' )?
	ExpressionDeclaration FunctionBody
;

/* INTERACTIONS */

/* Interactions */

Interaction :
	TypePrefix 'interaction'
	ClassifierDeclaration TypeBody
;

/* Item Flows */

ItemFlow :
	FeaturePrefix 'flow'
	ItemFlowDeclaration TypeBody
;

SuccessionItemFlow :
	FeaturePrefix 'succession' 'flow' ItemFlowDeclaration TypeBody
;

ItemFlowDeclaration :
	  FeatureDeclaration? ValuePart?
//      ( 'of'  ownedRelationship += ItemFeatureMember )?
//	  ( 'from' ownedRelationship += ItemFlowEndMember
//	    'to' ownedRelationship += ItemFlowEndMember )?
    | ( isSufficient ?= 'all' )?
//      ownedRelationship += ItemFlowEndMember 'to'
//	  ownedRelationship += ItemFlowEndMember
;

ItemFeatureMember :
    'temp'
//	ownedRelatedElement += ItemFeature
;

ItemFeature :
	  Identification? ItemFeatureSpecializationPart ValuePart?
	| Identification? ValuePart
//    | ownedRelationship += OwnedFeatureTyping ( ownedRelationship += OwnedMultiplicity )?
//    | ownedRelationship += OwnedMultiplicity ownedRelationship += OwnedFeatureTyping
;

ItemFeatureSpecializationPart :
    'temp'
//	  ( -> FeatureSpecialization )+ MultiplicityPart? FeatureSpecialization*
//	| MultiplicityPart FeatureSpecialization+
;

ItemFlowEndMember :
    'temp'
//	ownedRelatedElement += ItemFlowEnd
;

ItemFlowEnd :
    'temp'
//	( ownedRelationship += ItemFlowEndSubsetting )?
//	ownedRelationship += ItemFlowFeatureMember
;

ItemFlowEndSubsetting :
    'temp'
//	  referencedFeature = [SysML::Feature | QualifiedName] '.'
//	| ownedRelatedElement += FeatureChainPrefix
;

FeatureChainPrefix :
    'temp'
//	( ownedRelationship += OwnedFeatureChaining '.' )+
//	ownedRelationship += OwnedFeatureChaining '.'
;

ItemFlowFeatureMember :
    'temp'
//	ownedRelatedElement += ItemFlowFeature
;

ItemFlowFeature :
    'temp'
//	ownedRelationship += ItemFlowRedefinition
;

ItemFlowRedefinition :
    'temp'
//	redefinedFeature = [SysML::Feature|QualifiedName]
;

/* METADATA */

Metaclass :
	TypePrefix 'metaclass'
	ClassifierDeclaration TypeBody
;

PrefixMetadataAnnotation :
    'temp'
//	'#' ownedRelatedElement += PrefixMetadataFeature
;

PrefixMetadataMember :
    'temp'
//	'#' ownedRelatedElement += PrefixMetadataFeature
;

PrefixMetadataFeature :
    'temp'
//	ownedRelationship += MetadataTyping
;

MetadataFeature :
	( '@' | 'metadata' ) MetadataFeatureDeclaration
//	( 'about' ownedRelationship += Annotation
//		( ',' ownedRelationship += Annotation )*
//	)?
	MetadataBody
;

MetadataFeatureDeclaration :
    'temp'
//	( Identification ( ':' | 'typed' 'by' ) )? ownedRelationship += MetadataTyping
;

MetadataTyping :
    'temp'
//	type = [SysML::Metaclass | QualifiedName]
;

MetadataBody :
	  ';'
//	| '{' ( ownedRelationship += NonFeatureMember
//		  | ownedRelationship += MetadataBodyFeatureMember
//		  | ownedRelationship += AliasMember
//		  | ownedRelationship += Import
//	      )*
	  '}'
;

MetadataBodyFeatureMember :
    'temp'
//	ownedRelatedElement += MetadataBodyFeature
;

MetadataBodyFeature :
//	'feature'? ( ':>>' | 'redefines' )? ownedRelationship += OwnedRedefinition
	FeatureSpecializationPart? ValuePart?
	MetadataBody
;

/* EXPRESSIONS */

ExpressionBody :
	'{' FunctionBodyPart '}'
;
